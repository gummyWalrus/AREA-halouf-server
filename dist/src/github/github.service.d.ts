declare const Octokit: any;
import { IRepo, INewRepoOrg, INewRepo, IUpdateRepo, IDeleteRepo, IUpdateRepoOrg, IDeleteRepoOrg } from './interface/repos.interface';
import { ActionService } from '../../src/action/action.service';
import { ConfigService } from '@nestjs/config';
import { AreaService } from '../../src/area/area.service';
import { UserService } from '../../src/user/user.service';
import { AreaHandlerService } from '../../src/area-handler/area-handler.service';
export declare class GithubService {
    private config;
    private areaService;
    private userService;
    private handlerService;
    private actionService;
    constructor(config: ConfigService, areaService: AreaService, userService: UserService, handlerService: AreaHandlerService, actionService: ActionService);
    getHello(): string;
    listOrgs(): Promise<any>;
    listAllRepo(): Promise<IRepo[]>;
    createRepo(body: INewRepo): Promise<any>;
    updateRepo(body: IUpdateRepo): Promise<any>;
    deleteRepo(body: IDeleteRepo): Promise<any>;
    createRepoFromOrg(body: INewRepoOrg): Promise<any>;
    updateRepoFromOrg(body: IUpdateRepoOrg): Promise<any>;
    deleteRepoFromOrg(body: IDeleteRepoOrg): Promise<any>;
    webhook(req: any): Promise<any>;
    checkHooksUrl(hooks: any, url: any): boolean;
    getHookId(hooks: any, url: any): number;
    addWebhook(area: any): Promise<void>;
    createWebhook(area: any, octokit_user: typeof Octokit, event: string): Promise<void>;
    putWebhook(area: any, octokit_user: typeof Octokit, event: string, hook_id: number): Promise<void>;
}
export {};
